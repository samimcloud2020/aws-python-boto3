Python Pandas Is used for relational or labeled data and provides various data structures
for manipulating such data and time series.

This library is built on top of the NumPy library.
=================================================================================================
import pandas as pd
================================================================================================
Pandas generally provide two data structures for manipulating data, They are: 

Series
Dataframe
================================================================================================
Series: 

Pandas Series is a one-dimensional labeled array capable of holding data of any type (integer, string, float, python objects, etc.).

The axis labels are collectively called indexes. 

Pandas Series is nothing but a column in an excel sheet.

Labels need not be unique but must be a hashable type. 
=============================================================================================
It can be created using the Series() function by loading the dataset from the existing storage
like SQL, Database, CSV Files, Excel Files, etc., or from data structures like lists, dictionaries, etc.
=============================================================================================
import pandas as pd 
import numpy as np 

#creating empty series
ser = pd.Series()
print(ser)      # o/p is:    Series([], dtype: float64)

# simple array
data = np.array(['a','b','c','d','e'])

ser = pd.Series(data)
print(ser)



Series([], dtype: float64)
0    a
1    b
2    c
3    d
4    e
dtype: object
============================================================================================
Dataframe:

Pandas DataFrame is a two-dimensional size-mutable, potentially heterogeneous tabular data structure
with labeled axes (rows and columns). 

A Data frame is a two-dimensional data structure, i.e., data is aligned in a tabular fashion in rows and columns.

Pandas DataFrame consists of three principal components, the data, rows, and columns.
================================================================================================
It can be created using the Dataframe() method and just like a series, it can also be from 
different file types and data structures.
=================================================================================================
import pandas as pd 


#calling dataframe constructor
df = pd.DataFrame()
print(df)

#list of strings
lst = ["id","name","salary"]

#calling dataframe constructor on list
df = pd.DataFrame(lst)
print(df)



Empty DataFrame
Columns: []
Index: []
        0
0      id
1    name
2  salary
=================================================================
import requests

link = "https://datahub.io/machine-learning/iris/r/iris.csv"
f = requests.get(link)
print(f.text)
===================================================================
from urllib.request import urlopen

# if has Chinese, apply decode()
html = urlopen("https://datahub.io/machine-learning/iris/r/iris.csv").read().decode('utf-8')
print(html)
========================================================================
import pandas as pd

#read csv file
df = pd.read_csv("Iris.csv")


#printing top 5 rows
print(df.head())



 sepallength  sepalwidth  petallength  petalwidth        class
0          5.1         3.5          1.4         0.2  Iris-setosa
1          4.9         3.0          1.4         0.2  Iris-setosa
2          4.7         3.2          1.3         0.2  Iris-setosa
3          4.6         3.1          1.5         0.2  Iris-setosa
4          5.0         3.6          1.4         0.2  Iris-setosa
=========================================================================
The StringIO module is an in-memory file-like object. 

This object can be used as input or output to the most function that would expect a standard file object. 

When the StringIO object is created it is initialized by passing a string to the constructor.

import pandas as pd
import requests
from io import StringIO

#Downloading the CSV File
url = 'https://datahub.io/machine-learning/iris/r/iris.csv'
response = requests.get(url)
print(response.text)

#Converting the CSV File to a DataFrame
data = StringIO(response.text)
df = pd.read_csv(data)
print(df)

#read top 5 rows
print(df.head())


5.1,3.5,1.4,0.2,Iris-setosa
4.9,3.0,1.4,0.2,Iris-setosa
4.7,3.2,1.3,0.2,Iris-setosa
4.6,3.1,1.5,0.2,Iris-setosa
5.0,3.6,1.4,0.2,Iris-setosa
5.4,3.9,1.7,0.4,Iris-setosa
4.6,3.4,1.4,0.3,Iris-setosa
5.0,3.4,1.5,0.2,Iris-setosa
4.4,2.9,1.4,0.2,Iris-setosa
4.9,3.1,1.5,0.1,Iris-setosa
5.4,3.7,1.5,0.2,Iris-setosa
4.8,3.4,1.6,0.2,Iris-setosa
4.8,3.0,1.4,0.1,Iris-setosa



sepallength  sepalwidth  petallength  petalwidth           class
0            5.1         3.5          1.4         0.2     Iris-setosa
1            4.9         3.0          1.4         0.2     Iris-setosa
2            4.7         3.2          1.3         0.2     Iris-setosa
3            4.6         3.1          1.5         0.2     Iris-setosa
4            5.0         3.6          1.4         0.2     Iris-setosa
..           ...         ...          ...         ...             ...
145          6.7         3.0          5.2         2.3  Iris-virginica
146          6.3         2.5          5.0         1.9  Iris-virginica
147          6.5         3.0          5.2         2.0  Iris-virginica
148          6.2         3.4          5.4         2.3  Iris-virginica
149          5.9         3.0          5.1         1.8  Iris-virginica

[150 rows x 5 columns]


  sepallength  sepalwidth  petallength  petalwidth        class
0          5.1         3.5          1.4         0.2  Iris-setosa
1          4.9         3.0          1.4         0.2  Iris-setosa
2          4.7         3.2          1.3         0.2  Iris-setosa
3          4.6         3.1          1.5         0.2  Iris-setosa
4          5.0         3.6          1.4         0.2  Iris-setosa


=======================================================================================
======how StringIo  works==============================================================
# Importing the StringIO module.
from io import StringIO


# The arbitrary string.
string ='This is initial string.'

# Using the StringIO method to set
# as file object. Now we have an
# object file that we will able to
# treat just like a file.
file = StringIO(string)
print(file)

# this will read the file
print(file.read())

# We can also write this file.
file.write(" Welcome to geeksforgeeks.")

# This will make the cursor at
# index 0.
file.seek(0)

# This will print the file after
# writing in the initial string.
print('The string after writing is:', file.read())




<_io.StringIO object at 0x00000214A0C63F40>
This is initial string.
The string after writing is: This is initial string. Welcome to geeksforgeeks.
=============================================================================================
import pandas as pd

#read csv file
df = pd.read_csv("Iris.csv")

#filter columns, top 5 rows
df = df.filter(["sepallength","class"]).head()
print(df)



sepallength        class
0          5.1  Iris-setosa
1          4.9  Iris-setosa
2          4.7  Iris-setosa
3          4.6  Iris-setosa
4          5.0  Iris-setosa
=======================================================================================
import pandas as pd

#read csv file
df = pd.read_csv("Iris.csv")

#filter columns
df = df.sort_values(by='sepallength', ascending=True).head()
print(df)


  sepallength  sepalwidth  petallength  petalwidth        class
13          4.3         3.0          1.1         0.1  Iris-setosa
42          4.4         3.2          1.3         0.2  Iris-setosa
38          4.4         3.0          1.3         0.2  Iris-setosa
8           4.4         2.9          1.4         0.2  Iris-setosa
41          4.5         2.3          1.3         0.3  Iris-setosa
========================================================================================
import pandas as pd

#read csv file
df = pd.read_csv("Iris.csv")

#filter columns
df = df.sort_values(by=['sepallength', 'sepalwidth']).head()
print(df)


 sepallength  sepalwidth  petallength  petalwidth        class
13          4.3         3.0          1.1         0.1  Iris-setosa
8           4.4         2.9          1.4         0.2  Iris-setosa
38          4.4         3.0          1.3         0.2  Iris-setosa
42          4.4         3.2          1.3         0.2  Iris-setosa
41          4.5         2.3          1.3         0.3  Iris-setosa
=================================================================================
import pandas as pd

#read csv file
df = pd.read_csv("Iris.csv")

#filter columns
df = df.sort_values(by=['sepallength']).head()
print(df)


 sepallength  sepalwidth  petallength  petalwidth        class
13          4.3         3.0          1.1         0.1  Iris-setosa
42          4.4         3.2          1.3         0.2  Iris-setosa
38          4.4         3.0          1.3         0.2  Iris-setosa
8           4.4         2.9          1.4         0.2  Iris-setosa
41          4.5         2.3          1.3         0.3  Iris-setosa
======================================================================================
import pandas as pd

#read csv file
df = pd.read_csv("Iris.csv")

#filter columns
df = df.sort_values(by='sepallength', ascending=False).head()
print(df)



  sepallength  sepalwidth  petallength  petalwidth           class
131          7.9         3.8          6.4         2.0  Iris-virginica
135          7.7         3.0          6.1         2.3  Iris-virginica
122          7.7         2.8          6.7         2.0  Iris-virginica
117          7.7         3.8          6.7         2.2  Iris-virginica
118          7.7         2.6          6.9         2.3  Iris-virginica
================================================================================================
# importing pandas module
import pandas as pd

# Define a dictionary containing employee data
data1 = {'Name': ['Jai', 'Anuj', 'Jai', 'Princi',
                  'Gaurav', 'Anuj', 'Princi', 'Abhi'],
         'Age': [27, 24, 22, 32,
                 33, 36, 27, 32],
         'Address': ['Nagpur', 'Kanpur', 'Allahabad', 'Kannuaj',
                     'Jaunpur', 'Kanpur', 'Allahabad', 'Aligarh'],
         'Qualification': ['Msc', 'MA', 'MCA', 'Phd',
                           'B.Tech', 'B.com', 'Msc', 'MA']}

# Convert the dictionary into DataFrame
df = pd.DataFrame(data1)

print("Original Dataframe")
print(df)

# applying groupby() function to
# group the data on Name value.
gk = df.groupby('Name')
print(gk)

# Let's print the first entries
# in all the groups formed.
print("After Creating Groups")
print(gk.first())


Original Dataframe
     Name  Age    Address Qualification
0     Jai   27     Nagpur           Msc
1    Anuj   24     Kanpur            MA
2     Jai   22  Allahabad           MCA
3  Princi   32    Kannuaj           Phd
4  Gaurav   33    Jaunpur        B.Tech
5    Anuj   36     Kanpur         B.com
6  Princi   27  Allahabad           Msc
7    Abhi   32    Aligarh            MA
<pandas.core.groupby.generic.DataFrameGroupBy object at 0x000002992BC51C00>
After Creating Groups
        Age  Address Qualification
Name                              
Abhi     32  Aligarh            MA
Anuj     24   Kanpur            MA
Gaurav   33  Jaunpur        B.Tech
Jai      27   Nagpur           Msc
Princi   32  Kannuaj           Phd

======================================================================================

# importing pandas module
import pandas as pd

# importing numpy as np
import numpy as np

# Define a dictionary containing employee data
data1 = {'Name': ['Jai', 'Anuj', 'Jai', 'Princi',
				'Gaurav', 'Anuj', 'Princi', 'Abhi'],
		'Age': [27, 24, 22, 32,
				33, 36, 27, 32],
		'Address': ['Nagpur', 'Kanpur', 'Allahabad', 'Kannuaj',
					'Jaunpur', 'Kanpur', 'Allahabad', 'Aligarh'],
		'Qualification': ['Msc', 'MA', 'MCA', 'Phd',
								'B.Tech', 'B.com', 'Msc', 'MA']}


# Convert the dictionary into DataFrame
df = pd.DataFrame(data1)
print("#####################dataframe#####################")
print(df)

# performing aggregation using
# aggregate method
#group by name
grp1 = df.groupby('Name')

print("##################agg sum#########################")
print(grp1.aggregate(np.sum))
print("#################agg max##########################")
print(grp1.aggregate(np.max))
print("######################agg min######################")
print(grp1.aggregate(np.min))




#####################dataframe#####################
     Name  Age    Address Qualification
0     Jai   27     Nagpur           Msc
1    Anuj   24     Kanpur            MA
2     Jai   22  Allahabad           MCA
3  Princi   32    Kannuaj           Phd
4  Gaurav   33    Jaunpur        B.Tech
5    Anuj   36     Kanpur         B.com
6  Princi   27  Allahabad           Msc
7    Abhi   32    Aligarh            MA
##################agg sum#########################
        Age           Address Qualification
Name                                       
Abhi     32           Aligarh            MA
Anuj     60      KanpurKanpur       MAB.com
Gaurav   33           Jaunpur        B.Tech
Jai      49   NagpurAllahabad        MscMCA
Princi   59  KannuajAllahabad        PhdMsc
#################agg max##########################
        Age  Address Qualification
Name                              
Abhi     32  Aligarh            MA
Anuj     36   Kanpur            MA
Gaurav   33  Jaunpur        B.Tech
Jai      27   Nagpur           Msc
Princi   32  Kannuaj           Phd
######################agg min######################
        Age    Address Qualification
Name                                
Abhi     32    Aligarh            MA
Anuj     24     Kanpur         B.com
Gaurav   33    Jaunpur        B.Tech
Jai      22  Allahabad           MCA
Princi   27  Allahabad           Msc

============================================================================================
# importing pandas module
import pandas as pd

# Define a dictionary containing employee data
data1 = {'key': ['K0', 'K1', 'K2', 'K3'],
		 'Name': ['Jai', 'Princi', 'Gaurav', 'Anuj'],
		 'Age': [27, 24, 22, 32], }

# Define a dictionary containing employee data
data2 = {'key': ['K0', 'K1', 'K2', 'K3'],
		 'Address': ['Nagpur', 'Kanpur', 'Allahabad', 'Kannuaj'],
		 'Qualification': ['Btech', 'B.A', 'Bcom', 'B.hons']}

# Convert the dictionary into DataFrame
df1 = pd.DataFrame(data1)
print("###############data frame1#############")
print(df1)

# Convert the dictionary into DataFrame
df2 = pd.DataFrame(data2)
print("#################data frame2#################")
print(df2)



# combining series and dataframe
res = pd.concat([df1, df2], axis=1)
print("########concat df1 and df2 ############################")
print(res)




###############data frame1#############
  key    Name  Age
0  K0     Jai   27
1  K1  Princi   24
2  K2  Gaurav   22
3  K3    Anuj   32
#################data frame2#################
  key    Address Qualification
0  K0     Nagpur         Btech
1  K1     Kanpur           B.A
2  K2  Allahabad          Bcom
3  K3    Kannuaj        B.hons
########concat df1 and df2 ############################
  key    Name  Age key    Address Qualification
0  K0     Jai   27  K0     Nagpur         Btech
1  K1  Princi   24  K1     Kanpur           B.A
2  K2  Gaurav   22  K2  Allahabad          Bcom
3  K3    Anuj   32  K3    Kannuaj        B.hons
=====================================================================================================
# importing pandas module
import pandas as pd

# Define a dictionary containing employee data
data1 = {'key': ['K0', 'K1', 'K2', 'K3'],
		 'Name': ['Jai', 'Princi', 'Gaurav', 'Anuj'],
		 'Age': [27, 24, 22, 32], }

# Define a dictionary containing employee data
data2 = {'key': ['K0', 'K1', 'K2', 'K3'],
		 'Address': ['Nagpur', 'Kanpur', 'Allahabad', 'Kannuaj'],
		 'Qualification': ['Btech', 'B.A', 'Bcom', 'B.hons']}

# Convert the dictionary into DataFrame
df1 = pd.DataFrame(data1)
print("###############data frame1#############")
print(df1)

# Convert the dictionary into DataFrame
df2 = pd.DataFrame(data2)
print("#################data frame2#################")
print(df2)



# combining series and dataframe
res = pd.concat([df1, df2], axis=0)   #if axis=0
print("########concat df1 and df2 ############################")
print(res)




###############data frame1#############
  key    Name  Age
0  K0     Jai   27
1  K1  Princi   24
2  K2  Gaurav   22
3  K3    Anuj   32
#################data frame2#################
  key    Address Qualification
0  K0     Nagpur         Btech
1  K1     Kanpur           B.A
2  K2  Allahabad          Bcom
3  K3    Kannuaj        B.hons
########concat df1 and df2 ############################
  key    Name   Age    Address Qualification
0  K0     Jai  27.0        NaN           NaN
1  K1  Princi  24.0        NaN           NaN
2  K2  Gaurav  22.0        NaN           NaN
3  K3    Anuj  32.0        NaN           NaN
0  K0     NaN   NaN     Nagpur         Btech
1  K1     NaN   NaN     Kanpur           B.A
2  K2     NaN   NaN  Allahabad          Bcom
3  K3     NaN   NaN    Kannuaj        B.hons
=================================================================================================
================================MERGING DATAFRAME===============================================
The key is the common column that the two DataFrames will be joined on. 

It’s a good practice to use keys that have unique values throughout the column 
to avoid unintended duplication of row values. Pandas provide a single function, merge().


There are four basic ways to handle the join (inner, left, right, and outer),
depending on which rows must retain their data.

=================================================================================================

# importing pandas module
import pandas as pd

# Define a dictionary containing employee data
data1 = {'key': ['K0', 'K1', 'K2', 'K3'],
         'Name': ['Jai', 'Princi', 'Gaurav', 'Anuj'],
         'Age': [27, 24, 22, 32], }

# Define a dictionary containing employee data
data2 = {'key': ['K0', 'K1', 'K2', 'K3'],
         'Address': ['Nagpur', 'Kanpur', 'Allahabad', 'Kannuaj'],
         'Qualification': ['Btech', 'B.A', 'Bcom', 'B.hons']}

# Convert the dictionary into DataFrame
df1 = pd.DataFrame(data1)
print("############DATA FRAME1 ##########################")
print(df1)

# Convert the dictionary into DataFrame
df2 = pd.DataFrame(data2)
print("############DATA FRAME2 ##########################")
print(df2)


# using .merge() function
res = pd.merge(df1, df2, on='key')
print("#############AFTER MERGING###################")
print(res)



############DATA FRAME1 ##########################
  key    Name  Age
0  K0     Jai   27
1  K1  Princi   24
2  K2  Gaurav   22
3  K3    Anuj   32
############DATA FRAME2 ##########################
  key    Address Qualification
0  K0     Nagpur         Btech
1  K1     Kanpur           B.A
2  K2  Allahabad          Bcom
3  K3    Kannuaj        B.hons
#############AFTER MERGING###################
  key    Name  Age    Address Qualification
0  K0     Jai   27     Nagpur         Btech
1  K1  Princi   24     Kanpur           B.A
2  K2  Gaurav   22  Allahabad          Bcom
3  K3    Anuj   32    Kannuaj        B.hons
============================================================================================
# importing pandas module
import pandas as pd

# Define a dictionary containing employee data
data1 = {'Name': ['Jai', 'Princi', 'Gaurav', 'Anuj'],
         'Age': [27, 24, 22, 32]}

# Define a dictionary containing employee data
data2 = {'Address': ['Allahabad', 'Kannuaj', 'Allahabad', 'Kannuaj'],
         'Qualification': ['MCA', 'Phd', 'Bcom', 'B.hons']}

# Convert the dictionary into DataFrame
df1 = pd.DataFrame(data1, index=['K0', 'K1', 'K2', 'K3'])
print("############DATA FRAME1 ##########################")
print(df1)

# Convert the dictionary into DataFrame
df2 = pd.DataFrame(data2, index=['K0', 'K2', 'K3', 'K4'])
print("############DATA FRAME2 ##########################")
print(df2)



# joining dataframe
res = df1.join(df2)
print("#############AFTER JOINING###################")
print(res)




############DATA FRAME1 ##########################
      Name  Age
K0     Jai   27
K1  Princi   24
K2  Gaurav   22
K3    Anuj   32
############DATA FRAME2 ##########################
      Address Qualification
K0  Allahabad           MCA
K2    Kannuaj           Phd
K3  Allahabad          Bcom
K4    Kannuaj        B.hons
#############AFTER JOINING###################
      Name  Age    Address Qualification
K0     Jai   27  Allahabad           MCA
K1  Princi   24        NaN           NaN
K2  Gaurav   22    Kannuaj           Phd
K3    Anuj   32  Allahabad          Bcom
=========================================================================================
=====================INNER JOIN(COMMON IN BOTH)=========================================
# importing pandas
import pandas as pd

# Creating dataframe a
a = pd.DataFrame()

# Creating Dictionary
d = {'id': [1, 2, 10, 12],
	'val1': ['a', 'b', 'c', 'd']}

a = pd.DataFrame(d)
print(a)

# Creating dataframe b
b = pd.DataFrame()

# Creating dictionary
d = {'id': [1, 2, 9, 8],
	'val1': ['p', 'q', 'r', 's']}
b = pd.DataFrame(d)
print(b)

# inner join
df = pd.merge(a, b, on='id', how='inner')

# display dataframe
print(df)





 id val1
0   1    a
1   2    b
2  10    c
3  12    d
   id val1
0   1    p
1   2    q
2   9    r
3   8    s
   id val1_x val1_y
0   1      a      p
1   2      b      q
====================================================================================
========================INNER JOIN=================================================
# importing pandas
import pandas as pd

# Creating dataframe a
a = pd.DataFrame()

# Creating Dictionary
d = {'id': [1, 2, 10, 12],
	'val1': ['a', 'b', 'p', 'q']}

a = pd.DataFrame(d)
print(a)

# Creating dataframe b
b = pd.DataFrame()

# Creating dictionary
d = {'id': [1, 2, 9, 8],
	'val1': ['p', 'q', 'r', 's']}
b = pd.DataFrame(d)
print(b)

# inner join
df = pd.merge(a, b, on='val1', how='inner')

# display dataframe
print(df)




 id val1
0   1    a
1   2    b
2  10    p
3  12    q
   id val1
0   1    p
1   2    q
2   9    r
3   8    s
   id_x val1  id_y
0    10    p     1
1    12    q     2
======================================================================================
Pandas Left Join
With a left outer join, all the records from the first Dataframe will be displayed, 
irrespective of whether the keys in the first Dataframe can be found in the second Dataframe.

Whereas, for the second Dataframe, only the records with the keys in the second Dataframe that
can be found in the first Dataframe will be displayed.

==========================================================================================
# importing pandas
import pandas as pd

# Creating dataframe a
a = pd.DataFrame()

# Creating Dictionary
d = {'id': [1, 2, 10, 12],
	'val1': ['a', 'b', 'c', 'd']}

a = pd.DataFrame(d)
print(a)

# Creating dataframe b
b = pd.DataFrame()

# Creating dictionary
d = {'id': [1, 2, 9, 8],
	'val1': ['p', 'q', 'r', 's']}
b = pd.DataFrame(d)
print(b)

# inner join
df = pd.merge(a, b, on='id', how='left')

# display dataframe
print(df)




  id val1
0   1    a
1   2    b
2  10    c
3  12    d
   id val1
0   1    p
1   2    q
2   9    r
3   8    s
   id val1_x val1_y
0   1      a      p
1   2      b      q
2  10      c    NaN
3  12      d    NaN
============================================================================================
Pandas Right Outer Join
For a right join, all the records from the second Dataframe will be displayed.
However, only the records with the keys in the first Dataframe that can be found in the second Dataframe will be displayed.
================================================================================================
# importing pandas
import pandas as pd

# Creating dataframe a
a = pd.DataFrame()

# Creating Dictionary
d = {'id': [1, 2, 10, 12],
	'val1': ['a', 'b', 'c', 'd']}

a = pd.DataFrame(d)
print(a)

# Creating dataframe b
b = pd.DataFrame()

# Creating dictionary
d = {'id': [1, 2, 9, 8],
	'val1': ['p', 'q', 'r', 's']}
b = pd.DataFrame(d)
print(b)

# inner join
df = pd.merge(a, b, on='id', how='right')

# display dataframe
print(df)





   id val1
0   1    a
1   2    b
2  10    c
3  12    d
   id val1
0   1    p
1   2    q
2   9    r
3   8    s
   id val1_x val1_y
0   1      a      p
1   2      b      q
2   9    NaN      r
3   8    NaN      s
=======================================================================================
Pandas Full Outer Join
A full outer join returns all the rows from the left Dataframe, and 
all the rows from the right Dataframe, and matches up rows where possible,
with NaNs elsewhere. But if the Dataframe is complete, then we get the same output.

==========================================================================================
# importing pandas
import pandas as pd

# Creating dataframe a
a = pd.DataFrame()

# Creating Dictionary
d = {'id': [1, 2, 10, 12],
	'val1': ['a', 'b', 'c', 'd']}

a = pd.DataFrame(d)
print(a)

# Creating dataframe b
b = pd.DataFrame()

# Creating dictionary
d = {'id': [1, 2, 9, 8],
	'val1': ['p', 'q', 'r', 's']}
b = pd.DataFrame(d)
print(b)

# inner join
df = pd.merge(a, b, on='id', how='outer')

# display dataframe
print(df)






 id val1
0   1    a
1   2    b
2  10    c
3  12    d
   id val1
0   1    p
1   2    q
2   9    r
3   8    s
   id val1_x val1_y
0   1      a      p
1   2      b      q
2  10      c    NaN
3  12      d    NaN
4   9    NaN      r
5   8    NaN      s
==============================================================================================
Pandas Index Join
To merge the Dataframe on indices pass the left_index and right_index arguments as True
i.e. both the Dataframes are merged on an index using default Inner Join.
==============================================================================================
# importing pandas
import pandas as pd

# Creating dataframe a
a = pd.DataFrame()

# Creating Dictionary
d = {'id': [1, 2, 10, 12],
	'val1': ['a', 'b', 'c', 'd']}

a = pd.DataFrame(d)
print(a)

# Creating dataframe b
b = pd.DataFrame()

# Creating dictionary
d = {'id': [1, 2, 9, 8],
	'val1': ['p', 'q', 'r', 's']}
b = pd.DataFrame(d)
print(b)

# index join
df = pd.merge(a, b, left_index=True, right_index=True)

# display dataframe
print(df)





  id val1
0   1    a
1   2    b
2  10    c
3  12    d
   id val1
0   1    p
1   2    q
2   9    r
3   8    s
   id_x val1_x  id_y val1_y
0     1      a     1      p
1     2      b     2      q
2    10      c     9      r
3    12      d     8      s
==============================================================================================



