You can parse a JSON string using json.loads() method. The method returns a dictionary.

import json

person = '{"name": "Bob", "languages": ["English", "French"]}'
person_dict = json.loads(person)

# Output: {'name': 'Bob', 'languages': ['English', 'French']}
print( person_dict)

# Output: ['English', 'French']
print(person_dict['languages'])


Here, person is a JSON string, and person_dict is a dictionary.
================================================================================
person.json  (Suppose, you have a file named person.json which contains a JSON object)


{"name": "Bob", 
"languages": ["English", "French"]
}


import json

with open('person.json', 'r') as f:
  data = json.load(f)

# Output: {'name': 'Bob', 'languages': ['English', 'French']}
print(data)



root@SDOP_Ts:~/www# python3 p.py
{'name': 'Bob', 'languages': ['English', 'French']}



Here, we have used the open() function to read the json file. 
Then, the file is parsed using json.load() method which gives us a dictionary named data.
=====================================================================================
Convert dict to JSON



import json

person_dict = {'name': 'Bob',
'age': 12,
'children': None
}
person_json = json.dumps(person_dict)

# Output: {"name": "Bob", "age": 12, "children": null}
print(person_json)



{"name": "Bob", "age": 12, "children": null}
========================================================================================
Writing JSON to a file



import json

person_dict = {"name": "Bob",
"languages": ["English", "French"],
"married": True,
"age": 32
}

with open('person.txt', 'w') as json_file:
  json.dump(person_dict, json_file)



we have opened a file named person.txt in writing mode using 'w'. 
If the file doesn't already exist, it will be created. Then, json.dump() 
transforms person_dict to a JSON string which will be saved in the person.txt file.
==========================================================================================
To analyze and debug JSON data, we may need to print it in a more readable format. 
This can be done by passing additional parameters indent and sort_keys to json.dumps() and json.dump() method.


import json

person_string = '{"name": "Bob", "languages": "English", "numbers": [2, 1.6, null]}'

# Getting dictionary
person_dict = json.loads(person_string)

# Pretty Printing JSON string back
print(json.dumps(person_dict, indent = 4, sort_keys=True))




{
    "languages": "English",
    "name": "Bob",
    "numbers": [
        2,
        1.6,
        null
    ]
}



 we have used 4 spaces for indentation. And, the keys are sorted in ascending order.

By the way, the default value of indent is None. And, the default value of sort_keys is False.
====================================================================================================


